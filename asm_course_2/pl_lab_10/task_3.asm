; ������� �.�.
; 17-���
; ������� 9
;
; ����� ����������������
; ������������ �10
; ������� 3
; ����������� ��������� ���������� ������� �������. ������ ������� ����������� � ����������� ������ 320�200 256 ������ (����� VGA �13h). ����� ��������� ������� ������ ������������� � ����� ������ ���� ������. ���� ���� ������� � ���� ����� ������ ������������ � ���� ����������, ��������� � �������� ������. ������������� ��������� ������ ���������� �������������� �����, ������ �������� �������� ������� �� ������� [0; 319]. ��� ���������� ��������� ������ �������������� � ��������� �����.
; Y(X) = { -X/3 + 190,         X < 180
;        { X/2 + 4,     180 <= X < 320

.486                                      ;�������� ������ ������
.model small                              ;small - ������ ������ EXE-���������
Data SEGMENT use16
  ASSUME ds:Data
  BkCol db 1                              ;���� ����
  LnCol db 15                             ;���� �����
  LnAvr db 13                             ;���� ������� �����
  Yavr  dw 0                              ;����� �������� Y
Data ENDS
Stak SEGMENT use16 STACK
  ASSUME ss:Stak
  db 256 dup(0)
Stak ENDS
Code SEGMENT use16
  ASSUME cs:Code
start:
  mov ax, 13h                             ;������ � AH � 0 (������������� �����������), � AL � 13h (����� 320�200 256 ������)
  int 10h                                 ;����� ���������� BIOS � 10h
  mov ax, seg BkCol                       ;������ � AX ������ �������� Data
  mov ds, ax                              ;��������� DS �� ������� Data
  mov ax, 0a000h                          ;������ � AX ������ �������� �����������
  mov es, ax                              ;��������� ES �� ������� �����������
  xor di, di                              ;������� DI
  mov al, BkCol                           ;������ � AL ��� ����� ����
  mov ah, al                              ;������ � AH ��� ����� ����

  mov cx, 64000                           ;������� � CX ���������� ���������� (320*200)
  loop_0:
    mov bx, 64000
    sub bx, cx
    mov di, bx
    mov es:[di], al                       ;������������ ������ ������ ����
    loop loop_0

  xor ax, ax                              ;������������� ���������� X � �������� AX
  xor dx, dx
  next0:
    push ax                               ;���������� ���������� X � �����
    mov cx, ax                            ;X � CX
    sub cx, 180                           ;X - 180
    or cx, cx                             ;�������� CX �� ������������� �����
    jns func_2                            ;������� �� ������� ������
;//============    ������ ������ X < 180

    neg ax                                ;AX � ������������� �����
    xor dx, dx
    or ax, ax                             ;���� X = 0
    jns not_zero                          ;�������
    not dx                                ;DX ��� ������� ����� �������������� �����
  not_zero:
    mov cx, 3                             ;������ � CX ��������� 3
    idiv cx                               ;���������� -X/3
    add ax, 190                           ;���������� -X/3 + 190 (AX �������� �������� Y)

    jmp px_out
;//============    ������ ������ X >= 180
  func_2:
    mov cx, 2                             ;������ � CX ��������� 2
    xor dx, dx
    idiv cx                               ;���������� X/2
    add ax, 4                             ;���������� X/2 + 4 (AX �������� �������� Y)

;//============    ����� �������
  px_out:
    add word ptr Yavr, ax                 ;���������� �������� Y � ����������

    mov bx, 199                           ;������� Y �� ������� ��������� � ������� � ����� ������ ����
    sub bx, ax                            ;������ ���� � ����� ������� ����
    mov ax, bx                            ;���������� � AX ���������� Y � ����� �������
    mov cx, 320                           ;������ � CX ��������� 320 ��� ���������� ��������
    mul cx                                ;��������� �� ���������� �������� �� ������
    pop bx                                ;��������������� X � ������� BX
    add ax, bx                            ;���������� �������� ������ � ����������� X

    mov di, ax                            ;������ � DI �������� AX
    mov al, LnCol                         ;������ � AL ��� ����� �����
    mov es:[di], al                       ;������ ����� � ����������
    mov ax, bx                            ;���������� � AX �������� ���������� X (�� BX)
    inc ax                                ;��������� �������� AX
    cmp ax, 320                           ;��������� � ������ �������� ������
    jnz next0                             ;���� �� �������� �������, �� ������� �� next0

;//============     ���������� ��������� �������� �������
  mov ax, Yavr                            ;������� � AX ����� ���� �������� Y
  mov cx, 320                             ;������ � CX ��������� 320 ��� ���������� ��������� ��������
  div cx                                  ;� AX ������� �������� Y

  mov bx, 199                             ;������� Y �� ������� ��������� � ������� � ����� ������ ����
  sub bx, ax                              ;������ ���� � ����� ������� ����
  mov ax, bx                              ;���������� � AX ���������� Y � ����� �������
  mov dx, 320                             ;������ � DX ��������� 320 ��� ���������� ��������
  mul dx                                  ;��������� �� ���������� �������� �� ������

  mov cx, 320
  mov bl, LnAvr                           ;������ � AL ��� ����� �����
  loop_1:
    mov di, ax                            ;������ � DI �������� AX
    mov es:[di], bl                       ;������ ����� � ����������
    inc ax                                ;��������� �������� AX

    loop loop_1

  wait0:
    in al,60h                             ;������ �������� �� ����� ����������
    cmp al,1                              ;��������� AL � ����� ������� ESC
    jnz wait0                             ;���� �� �����, �� ������� �� wait0
  mov ax,3                                ;������ � AH � 0 (������������� �����������), � AL � 3h (��������� ����� ����� 25, 80 ��������)

  int 10h                                 ;����� ���������� BIOS 10h
  mov ax,4c00h                            ;������ � AX ����� ������� ���������� ���������
  int 21h                                 ;����� ���������� MS DOS 21h
Code ENDS
end start
